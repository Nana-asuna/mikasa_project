# Generated by Django 4.2.7 on 2025-07-02 20:15

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('role', models.CharField(choices=[('admin', 'Administrateur'), ('medecin', 'Médecin'), ('soignant', 'Soignant'), ('assistant_social', 'Assistant Social'), ('logisticien', 'Logisticien'), ('donateur', 'Donateur'), ('parrain', 'Parrain'), ('visiteur', 'Visiteur')], default='visiteur', max_length=20, verbose_name='Rôle')),
                ('status', models.CharField(choices=[('pending', "En attente d'approbation"), ('approved', 'Approuvé'), ('rejected', 'Rejeté'), ('suspended', 'Suspendu')], default='pending', max_length=20, verbose_name='Statut')),
                ('phone_number', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message="Le numéro de téléphone doit être au format: '+999999999'. Jusqu'à 15 chiffres autorisés.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Téléphone')),
                ('motivation', models.TextField(blank=True, help_text='Pourquoi souhaitez-vous rejoindre notre organisation?', verbose_name='Motivation')),
                ('experience', models.TextField(blank=True, help_text='Décrivez votre expérience pertinente', verbose_name='Expérience')),
                ('specialization', models.CharField(blank=True, help_text='Pour les médecins et soignants', max_length=200, verbose_name='Spécialisation')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Email vérifié')),
                ('failed_login_attempts', models.PositiveIntegerField(default=0, verbose_name='Tentatives de connexion échouées')),
                ('last_failed_login', models.DateTimeField(blank=True, null=True, verbose_name='Dernière tentative échouée')),
                ('password_changed_at', models.DateTimeField(auto_now_add=True, verbose_name='Mot de passe modifié le')),
                ('must_change_password', models.BooleanField(default=False, verbose_name='Doit changer le mot de passe')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
                ('approved_at', models.DateTimeField(blank=True, null=True, verbose_name='Approuvé le')),
                ('rejection_reason', models.TextField(blank=True, verbose_name='Raison du rejet')),
                ('last_ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='Dernière adresse IP')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_users', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_users', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'permissions': [('can_manage_users', 'Peut gérer les utilisateurs'), ('can_view_sensitive_data', 'Peut voir les données sensibles'), ('can_export_data', 'Peut exporter les données'), ('can_approve_users', 'Peut approuver les utilisateurs')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/', verbose_name='Avatar')),
                ('bio', models.TextField(blank=True, max_length=500, verbose_name='Biographie')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date de naissance')),
                ('address', models.TextField(blank=True, verbose_name='Adresse')),
                ('emergency_contact', models.CharField(blank=True, max_length=100, verbose_name="Contact d'urgence")),
                ('emergency_phone', models.CharField(blank=True, max_length=17, verbose_name="Téléphone d'urgence")),
                ('language', models.CharField(default='fr', max_length=10, verbose_name='Langue')),
                ('timezone', models.CharField(default='Europe/Paris', max_length=50, verbose_name='Fuseau horaire')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='Notifications par email')),
                ('sms_notifications', models.BooleanField(default=False, verbose_name='Notifications par SMS')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profil utilisateur',
                'verbose_name_plural': 'Profils utilisateur',
            },
        ),
        migrations.CreateModel(
            name='UserApprovalRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requested_at', models.DateTimeField(auto_now_add=True, verbose_name='Demandé le')),
                ('reviewed_at', models.DateTimeField(blank=True, null=True, verbose_name='Examiné le')),
                ('admin_notes', models.TextField(blank=True, verbose_name="Notes de l'administrateur")),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviewed_requests', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='approval_request', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': "Demande d'approbation",
                'verbose_name_plural': "Demandes d'approbation",
                'ordering': ['-requested_at'],
            },
        ),
        migrations.CreateModel(
            name='PasswordHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password_hash', models.CharField(max_length=128, verbose_name='Hash du mot de passe')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='password_history', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Historique des mots de passe',
                'verbose_name_plural': 'Historiques des mots de passe',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LoginAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, verbose_name='Email')),
                ('ip_address', models.GenericIPAddressField(verbose_name='Adresse IP')),
                ('user_agent', models.TextField(verbose_name='User Agent')),
                ('success', models.BooleanField(verbose_name='Succès')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Horodatage')),
                ('failure_reason', models.CharField(blank=True, max_length=100, verbose_name="Raison de l'échec")),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tentative de connexion',
                'verbose_name_plural': 'Tentatives de connexion',
                'ordering': ['-timestamp'],
            },
        ),
    ]
